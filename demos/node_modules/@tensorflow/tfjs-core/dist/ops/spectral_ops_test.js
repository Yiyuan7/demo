"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tf = require("../index");
var jasmine_util_1 = require("../jasmine_util");
var test_util_1 = require("../test_util");
jasmine_util_1.describeWithFlags('1D FFT', test_util_1.ALL_ENVS, function () {
    it('should return the same value with TensorFlow (2 elements)', function () {
        var t1Real = tf.tensor1d([1, 2]);
        var t1Imag = tf.tensor1d([1, 1]);
        var t1 = tf.complex(t1Real, t1Imag);
        test_util_1.expectArraysClose(tf.spectral.fft(t1), [3, 2, -1, 0]);
    });
    it('should calculate FFT from Tensor directly', function () {
        var t1Real = tf.tensor1d([1, 2]);
        var t1Imag = tf.tensor1d([1, 1]);
        var t1 = tf.complex(t1Real, t1Imag);
        test_util_1.expectArraysClose(t1.fft(), [3, 2, -1, 0]);
    });
    it('should return the same value as TensorFlow (3 elements)', function () {
        var t1Real = tf.tensor1d([1, 2, 3]);
        var t1Imag = tf.tensor1d([0, 0, 0]);
        var t1 = tf.complex(t1Real, t1Imag);
        test_util_1.expectArraysClose(tf.spectral.fft(t1), [6, 0, -1.5, 0.866025, -1.5, -0.866025]);
    });
    it('should return the same value as TensorFlow with imaginary (3 elements)', function () {
        var t1Real = tf.tensor1d([1, 2, 3]);
        var t1Imag = tf.tensor1d([1, 2, 3]);
        var t1 = tf.complex(t1Real, t1Imag);
        test_util_1.expectArraysClose(tf.spectral.fft(t1), [6, 6, -2.3660252, -0.63397473, -0.6339747, -2.3660254]);
    });
    it('should return the same value as TensorFlow (negative 3 elements)', function () {
        var t1Real = tf.tensor1d([-1, -2, -3]);
        var t1Imag = tf.tensor1d([-1, -2, -3]);
        var t1 = tf.complex(t1Real, t1Imag);
        test_util_1.expectArraysClose(tf.spectral.fft(t1), [-5.9999995, -6, 2.3660252, 0.63397473, 0.6339747, 2.3660254]);
    });
    it('should return the same value with TensorFlow (4 elements)', function () {
        var t1Real = tf.tensor1d([1, 2, 3, 4]);
        var t1Imag = tf.tensor1d([0, 0, 0, 0]);
        var t1 = tf.complex(t1Real, t1Imag);
        test_util_1.expectArraysClose(tf.spectral.fft(t1), [10, 0, -2, 2, -2, 0, -2, -2]);
    });
    it('should return the same value as TensorFlow with imaginary (4 elements)', function () {
        var t1Real = tf.tensor1d([1, 2, 3, 4]);
        var t1Imag = tf.tensor1d([1, 2, 3, 4]);
        var t1 = tf.complex(t1Real, t1Imag);
        test_util_1.expectArraysClose(tf.spectral.fft(t1), [10, 10, -4, 0, -2, -2, 0, -4]);
    });
});
jasmine_util_1.describeWithFlags('FFT', test_util_1.WEBGL_ENVS, function () {
    it('2D: should return the same value as TensorFlow', function () {
        var t1Real = tf.tensor2d([1, 2, 3, 4], [2, 2]);
        var t1Imag = tf.tensor2d([5, 6, 7, 8], [2, 2]);
        var t1 = tf.complex(t1Real, t1Imag);
        var y = tf.spectral.fft(t1);
        test_util_1.expectArraysClose(y, [3, 11, -1, -1, 7, 15, -1, -1]);
        expect(y.shape).toEqual(t1Real.shape);
    });
    it('3D: should return the same value as TensorFlow', function () {
        var t1Real = tf.tensor3d([1, 2, 3, 4, -1, -2, -3, -4], [2, 2, 2]);
        var t1Imag = tf.tensor3d([5, 6, 7, 8, -5, -6, -7, -8], [2, 2, 2]);
        var t1 = tf.complex(t1Real, t1Imag);
        var y = tf.spectral.fft(t1);
        test_util_1.expectArraysClose(y, [3, 11, -1, -1, 7, 15, -1, -1, -3, -11, 1, 1, -7, -15, 1, 1]);
        expect(y.shape).toEqual(t1Real.shape);
    });
});
jasmine_util_1.describeWithFlags('FFT CPU', test_util_1.BROWSER_CPU_ENVS, function () {
    it('2D throws', function () {
        var t1Real = tf.tensor2d([1, 2, 3, 4], [2, 2]);
        var t1Imag = tf.tensor2d([5, 6, 7, 8], [2, 2]);
        var t1 = tf.complex(t1Real, t1Imag);
        expect(function () { return tf.spectral.fft(t1); }).toThrow();
    });
    it('3D throws', function () {
        var t1Real = tf.tensor3d([1, 2, 3, 4, -1, -2, -3, -4], [2, 2, 2]);
        var t1Imag = tf.tensor3d([5, 6, 7, 8, -5, -6, -7, -8], [2, 2, 2]);
        var t1 = tf.complex(t1Real, t1Imag);
        expect(function () { return tf.spectral.fft(t1); }).toThrow();
    });
});
//# sourceMappingURL=spectral_ops_test.js.map