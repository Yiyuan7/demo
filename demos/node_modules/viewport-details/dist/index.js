"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tick_manager_1 = require("tick-manager");
var EScrollDirectionX;
(function (EScrollDirectionX) {
    EScrollDirectionX[EScrollDirectionX["Left"] = -1] = "Left";
    EScrollDirectionX[EScrollDirectionX["None"] = 0] = "None";
    EScrollDirectionX[EScrollDirectionX["Right"] = 1] = "Right";
})(EScrollDirectionX = exports.EScrollDirectionX || (exports.EScrollDirectionX = {}));
var EScrollDirectionY;
(function (EScrollDirectionY) {
    EScrollDirectionY[EScrollDirectionY["Up"] = -1] = "Up";
    EScrollDirectionY[EScrollDirectionY["None"] = 0] = "None";
    EScrollDirectionY[EScrollDirectionY["Down"] = 1] = "Down";
})(EScrollDirectionY = exports.EScrollDirectionY || (exports.EScrollDirectionY = {}));
// A psuedo element is used to calculate heightCollapsedControls as the window.height value changes
// on iOS as the user scrolls and the browser chrome shrinks
var vhElem = addHeightElement();
// State
var initialised = false;
var width = window.innerWidth;
var heightCollapsedControls = vhElem.offsetHeight;
var height = window.innerHeight;
var scrollX = window.pageXOffset;
var scrollY = window.pageYOffset;
var resized = false;
var scrolled = false;
var scrollDirectionX;
var scrollDirectionY;
var orientation = window.orientation;
var orientationChanged = false;
var changed = false;
// Previous State
var previousState;
var previousWidth = width;
var previousHeight = height;
var previousScrollX = scrollX;
var previousScrollY = scrollY;
var previousOrientation = orientation;
// Public functions
function GetViewportDetails() {
    if (!initialised) {
        initialised = true;
        tick_manager_1.AddInitialTick(setDetails);
    }
    var state = {
        width: width,
        height: height,
        heightCollapsedControls: heightCollapsedControls,
        scrollX: scrollX,
        scrollY: scrollY,
        orientation: orientation,
        resized: resized,
        scrolled: scrolled,
        orientationChanged: orientationChanged,
        scrollDirectionX: scrollDirectionX,
        scrollDirectionY: scrollDirectionY,
        previous: previousState,
        changed: changed,
    };
    previousState = state;
    return state;
}
exports.GetViewportDetails = GetViewportDetails;
// Private functions
function setDetails() {
    // Set current
    width = window.innerWidth;
    height = window.innerHeight;
    heightCollapsedControls = vhElem.offsetHeight;
    scrollX = window.pageXOffset;
    scrollY = window.pageYOffset;
    orientation = window.orientation;
    // Set resized, scrolled, and orientation changed
    resized = previousWidth !== width || previousHeight !== height;
    scrolled = previousScrollX !== scrollX || previousScrollY !== scrollY;
    scrollDirectionX = getScrollDirection(previousScrollX, scrollX);
    scrollDirectionY = getScrollDirection(previousScrollY, scrollY);
    orientationChanged = previousOrientation !== orientation;
    // Set previous
    previousWidth = width;
    previousHeight = height;
    previousScrollX = scrollX;
    previousScrollY = scrollY;
    previousOrientation = orientation;
    changed = resized || scrolled || orientationChanged;
}
function addHeightElement() {
    var elem = document.createElement('div');
    elem.style.position = 'fixed';
    elem.style.height = '100vh';
    document.documentElement.appendChild(elem);
    return elem;
}
function getScrollDirection(previous, current) {
    if (previous < current) {
        return 1;
    }
    if (previous > current) {
        return -1;
    }
    return 0;
}
