"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var user_scroll_events_1 = require("./user-scroll-events");
var keycodes_1 = require("./keycodes");
var win = window;
var ScrollableArea = /** @class */ (function () {
    function ScrollableArea(Element) {
        this.Element = Element;
        this.hasFocus = false;
    }
    ScrollableArea.prototype.SetEventListeners = function (enable) {
        var _this = this;
        user_scroll_events_1.USER_SCROLL_EVENTS.forEach(function (eventType) {
            if (enable) {
                _this.Element.addEventListener(eventType, _this.handleOverScroll.bind(_this));
            }
            else {
                _this.Element.removeEventListener(eventType, _this.handleOverScroll.bind(_this));
            }
        });
        if (enable) {
            this.Element.addEventListener('touchstart', this.handleTouchStart.bind(this));
            win.addEventListener('keydown', this.handleOverScroll.bind(this));
            win.addEventListener('click', this.handleClick.bind(this));
        }
        else {
            this.Element.removeEventListener('touchstart', this.handleTouchStart.bind(this));
            win.removeEventListener('keydown', this.handleOverScroll.bind(this));
            win.removeEventListener('click', this.handleClick.bind(this));
        }
    };
    ScrollableArea.prototype.handleTouchStart = function (event) {
        var touch = event.touches[0];
        this.touchStart = {
            x: touch.clientX,
            y: touch.clientY,
        };
    };
    ScrollableArea.prototype.handleClick = function (event) {
        var source = event.srcElement;
        if (source === this.Element || this.Element.contains(source)) {
            this.hasFocus = true;
        }
        else {
            this.hasFocus = false;
        }
    };
    ScrollableArea.prototype.handleOverScroll = function (event) {
        var eventType = event.type;
        if (eventType !== 'mousedown') {
            var scrollY_1 = this.Element.scrollTop;
            var deltaY = void 0;
            if (eventType === 'keydown') {
                var tagName = event.srcElement.tagName.toLowerCase();
                var keyCode = event.keyCode;
                if (this.hasFocus && tagName !== 'input' && tagName !== 'textarea' && user_scroll_events_1.USER_SCROLL_KEYBOARD_EVENTS.includes(keyCode)) {
                    switch (keyCode) {
                        case keycodes_1.EKeyCodes.Up:
                        case keycodes_1.EKeyCodes.PageUp:
                        case keycodes_1.EKeyCodes.Home:
                            deltaY = -1;
                            break;
                        default:
                            deltaY = 1;
                    }
                }
            }
            else if (eventType === 'touchmove') {
                deltaY = this.touchStart.y - event.touches[0].clientY;
            }
            else {
                deltaY = event.deltaY;
            }
            if (deltaY) {
                // Handle -0 also
                if (deltaY.toString().includes('-')) {
                    if (scrollY_1 === 0) {
                        event.preventDefault();
                    }
                }
                else {
                    if (scrollY_1 + this.Element.offsetHeight === this.Element.scrollHeight) {
                        event.preventDefault();
                    }
                }
            }
        }
    };
    return ScrollableArea;
}());
exports.ScrollableArea = ScrollableArea;
