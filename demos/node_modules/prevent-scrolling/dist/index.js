"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var prevent_overscrolling_1 = require("prevent-overscrolling");
var ua_parser_js_1 = require("ua-parser-js");
var user_scroll_events_1 = require("./user-scroll-events");
var passive_supported_1 = require("./passive-supported");
var IGNORE_PREVENT_WINDOW_SCROLL_BROWSERS = ['Mobile Safari', 'Safari', 'IE', 'Edge'];
var browser = new ua_parser_js_1.UAParser().getBrowser().name || '';
var win = window;
var allowScrollElements = [];
var previousScrollX;
var previousScrollY;
var scrollableAreaHasFocus = false;
var scrollingPrevented = false;
win.addEventListener('click', handleWindowClick);
function PreventScrolling(allowScrollingOn) {
    if (!scrollingPrevented) {
        scrollingPrevented = true;
        if (allowScrollingOn) {
            if (Array.isArray(allowScrollingOn)) {
                allowScrollElements = allowScrollingOn;
            }
            else {
                allowScrollElements = [allowScrollingOn];
            }
        }
        lockWindow();
        setScrollingEvents(true);
    }
}
exports.PreventScrolling = PreventScrolling;
function ReEnableScrolling() {
    if (scrollingPrevented) {
        unlockWindow();
        setScrollingEvents(false);
        scrollingPrevented = false;
    }
}
exports.ReEnableScrolling = ReEnableScrolling;
function setScrollingEvents(enable) {
    user_scroll_events_1.USER_SCROLL_EVENTS.forEach(function (event) {
        if (enable) {
            win.addEventListener(event, preventDefault, passive_supported_1.passiveSupported ? { passive: false } : null);
        }
        else {
            win.removeEventListener(event, preventDefault, passive_supported_1.passiveSupported ? { passive: false } : null);
        }
    });
    allowScrollElements.forEach(function (element) {
        if (enable) {
            element.addEventListener('click', handleScrollElementClick);
            prevent_overscrolling_1.PreventOverScrolling(element);
        }
        else {
            element.removeEventListener('click', handleScrollElementClick);
            prevent_overscrolling_1.ReEnableOverScrolling(element);
        }
    });
    if (enable) {
        win.addEventListener('keydown', preventDefaultKeyboard);
    }
    else {
        win.removeEventListener('keydown', preventDefaultKeyboard);
        allowScrollElements = [];
    }
}
function preventDefault(event) {
    var source = event.srcElement;
    if (!sourceIsScrollElementOrChild(source)) {
        event.preventDefault();
    }
}
function sourceIsScrollElementOrChild(element) {
    if (allowScrollElements.length) {
        return !!allowScrollElements.find(function (e) { return e === element || e.contains(element); });
    }
    return false;
}
function preventDefaultKeyboard(event) {
    var keyCode = event.keyCode;
    var source = event.target;
    if (source.tagName !== 'INPUT' && !scrollableAreaHasFocus && user_scroll_events_1.USER_SCROLL_KEYBOARD_EVENTS.includes(keyCode)) {
        event.preventDefault();
    }
}
function lockWindow() {
    previousScrollX = win.pageXOffset;
    previousScrollY = win.pageYOffset;
    if (!IGNORE_PREVENT_WINDOW_SCROLL_BROWSERS.includes(browser)) {
        win.addEventListener('scroll', setWindowScroll);
    }
}
function unlockWindow() {
    win.removeEventListener('scroll', setWindowScroll);
}
function setWindowScroll() {
    win.scrollTo(previousScrollX, previousScrollY);
}
function handleWindowClick() {
    scrollableAreaHasFocus = false;
}
function handleScrollElementClick() {
    scrollableAreaHasFocus = true;
}
